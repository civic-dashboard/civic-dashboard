name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        component: [data-fetcher, data-store, sync-elastic]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Cache Docker layers
        uses: actions/cache@v4.1.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN for authentication

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6.9.0
        with:
          context: services/${{ matrix.component }}
          push: true
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.component }}:${{ github.event_name == 'push' && 'main' || github.head_ref }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-helm:
    name: Test Helm Deployment
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Kind
        uses: helm/kind-action@v1.12.0

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4.0.0
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: 'latest'

      - name: Verify Images Exist in Registry
        run: |
          echo "Verifying image existence in registry..."
          docker manifest inspect ghcr.io/${{ github.repository_owner }}/data-fetcher:${{ github.event_name == 'push' && 'main' || github.head_ref }}-${{ github.sha }} || exit 1
          docker manifest inspect ghcr.io/${{ github.repository_owner }}/data-store:${{ github.event_name == 'push' && 'main' || github.head_ref }}-${{ github.sha }} || exit 1
          docker manifest inspect ghcr.io/${{ github.repository_owner }}/sync-elastic:${{ github.event_name == 'push' && 'main' || github.head_ref }}-${{ github.sha }} || exit 1
          echo "All images exist in the registry."

      - name: Ensure Namespace Exists
        run: |
          kubectl get namespace civic-dashboard || kubectl create namespace civic-dashboard
        shell: bash

      - name: Deploy Helm Chart
        run: |
          helm upgrade --install civic-dashboard ./civic-dashboard \
            --namespace civic-dashboard \
            --create-namespace \
            --atomic \
            --cleanup-on-fail \
            --timeout 300s \
            --values ./civic-dashboard/values.yaml \
            --set-string images.dataFetcher.repository=ghcr.io/${{ github.repository_owner }}/data-fetcher \
            --set-string images.dataFetcher.tag=${{ github.event_name == 'push' && 'main' || github.head_ref }}-${{ github.sha }} \
            --set-string images.dataStore.repository=ghcr.io/${{ github.repository_owner }}/data-store \
            --set-string images.dataStore.tag=${{ github.event_name == 'push' && 'main' || github.head_ref }}-${{ github.sha }} \
            --set-string images.syncElastic.repository=ghcr.io/${{ github.repository_owner }}/sync-elastic \
            --set-string images.syncElastic.tag=${{ github.event_name == 'push' && 'main' || github.head_ref }}-${{ github.sha }}
        shell: bash

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/civic-dashboard-elasticsearch -n civic-dashboard
          kubectl rollout status deployment/civic-dashboard-postgres -n civic-dashboard
          kubectl rollout status deployment/civic-dashboard-data-fetcher -n civic-dashboard
          kubectl rollout status deployment/civic-dashboard-data-store -n civic-dashboard
          kubectl rollout status deployment/civic-dashboard-sync-elastic -n civic-dashboard
        shell: bash

      - name: Wait for Pods to be Ready
        run: |
          echo "Waiting for pods to be ready..."
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/instance=civic-dashboard -n civic-dashboard --timeout=300s
        shell: bash

      - name: Probe Endpoints
        run: |
          echo "Probing endpoints..."
          kubectl run -n civic-dashboard curl-pod --image=curlimages/curl:latest --rm -i --restart=Never -- \
            sh -c "
              set -e;
              echo 'Probing data-fetcher...';
              curl -f http://civic-dashboard-data-fetcher:5000/healthz;
              echo 'Probing data-store...';
              curl -f http://civic-dashboard-data-store:5000/healthz;
              echo 'Probing sync-elastic...';
              curl -f http://civic-dashboard-sync-elastic:5000/healthz;
            "
          echo "All endpoints are healthy!"
        shell: bash

