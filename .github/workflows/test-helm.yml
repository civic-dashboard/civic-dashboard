name: Test Helm Deployment

on:
  workflow_run:
    workflows:
      - Build and Push Docker Images (Main)
      - Build and Push Docker Images (PR)
    types:
      - completed

permissions:
  contents: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Kind
        uses: helm/kind-action@v1.12.0

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Determine Image Tags
        id: determine-tags
        run: |
          # Default tags for all components
          echo "data_fetcher_tag=main-$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "data_store_tag=main-$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "sync_elastic_tag=main-$(git rev-parse HEAD)" >> $GITHUB_ENV

          # Check if each image was rebuilt in the PR or main push
          if ! gh api --method GET "/repos/${{ github.repository }}/packages/container/data-fetcher/versions" | grep -q "${{ github.sha }}"; then
            latest_tag=$(gh api --method GET "/repos/${{ github.repository }}/packages/container/data-fetcher/versions" | jq -r '.[0].metadata.container.tags[]' | grep '^main-' | head -n 1)
            echo "data_fetcher_tag=${latest_tag}" >> $GITHUB_ENV
          fi

          if ! gh api --method GET "/repos/${{ github.repository }}/packages/container/data-store/versions" | grep -q "${{ github.sha }}"; then
            latest_tag=$(gh api --method GET "/repos/${{ github.repository }}/packages/container/data-store/versions" | jq -r '.[0].metadata.container.tags[]' | grep '^main-' | head -n 1)
            echo "data_store_tag=${latest_tag}" >> $GITHUB_ENV
          fi

          if ! gh api --method GET "/repos/${{ github.repository }}/packages/container/sync-elastic/versions" | grep -q "${{ github.sha }}"; then
            latest_tag=$(gh api --method GET "/repos/${{ github.repository }}/packages/container/sync-elastic/versions" | jq -r '.[0].metadata.container.tags[]' | grep '^main-' | head -n 1)
            echo "sync_elastic_tag=${latest_tag}" >> $GITHUB_ENV
          fi

      - name: Ensure Namespace Exists
        run: |
          kubectl get namespace civic-dashboard || kubectl create namespace civic-dashboard

      - name: Deploy Helm Chart
        run: |
          helm upgrade --install civic-dashboard ./civic-dashboard \
            --namespace civic-dashboard \
            --create-namespace \
            --atomic \
            --cleanup-on-fail \
            --timeout 300s \
            --set-string images.dataFetcher=ghcr.io/${{ github.repository_owner }}/data-fetcher:${{ env.data_fetcher_tag }} \
            --set-string images.dataStore=ghcr.io/${{ github.repository_owner }}/data-store:${{ env.data_store_tag }} \
            --set-string images.syncElastic=ghcr.io/${{ github.repository_owner }}/sync-elastic:${{ env.sync_elastic_tag }}

      - name: Wait for Pods to be Ready
        run: |
          kubectl wait --for=condition=Ready pods --all -n civic-dashboard --timeout=300s

      - name: Probe Endpoints
        run: |
          kubectl run -n civic-dashboard curl-pod --image=curlimages/curl:latest --rm -i --restart=Never -- \
            sh -c "
              curl -f http://civic-dashboard-data-fetcher:5000/healthz &&
              curl -f http://civic-dashboard-data-store:5000/healthz &&
              curl -f http://civic-dashboard-sync-elastic:5000/healthz
            "
